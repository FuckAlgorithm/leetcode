class Solution {
    
    vector<int> parents;
    
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for (int i = 0; i < n; ++i) parents.push_back(i);
        for (int i = 0; i < n; ++i)
            for (int j = i + 1; j < n; ++j)
                if (graph[i][j]) uni(i, j);
        vector<int> area(n, 0), malware(n, 0);
        for (int i = 0; i < n; ++i) area[find(i)]++;
        for (int i : initial) malware[find(i)]++;
        int maxarea = 1, idx = initial[0];
        for (int i : initial) {
            if (malware[find(i)] == 1 && area[find(i)] > maxarea) {
                maxarea = area[find(i)];
                idx = i;
            }
            if (maxarea == 1) {
                idx = min(idx, i);
            }
        }
        return idx;
    }

    int find(int x) {
        if (x != parents[x])
            parents[x] = find(parents[x]);
        return parents[x];
    }
    
    void uni(int x, int y) {
        parents[find(x)] = find(y);
    }
};
